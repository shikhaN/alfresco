package com.lti.idss.service.taxpayer.everification.doc.business.service;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.apache.chemistry.opencmis.client.api.CmisObject;
import org.apache.chemistry.opencmis.client.api.Document;
import org.apache.chemistry.opencmis.client.api.Folder;
import org.apache.chemistry.opencmis.client.api.Session;
import org.apache.chemistry.opencmis.client.api.SessionFactory;
import org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl;
import org.apache.chemistry.opencmis.commons.PropertyIds;
import org.apache.chemistry.opencmis.commons.SessionParameter;
import org.apache.chemistry.opencmis.commons.data.ContentStream;
import org.apache.chemistry.opencmis.commons.enums.BindingType;
import org.apache.chemistry.opencmis.commons.enums.VersioningState;
import org.apache.chemistry.opencmis.commons.exceptions.CmisContentAlreadyExistsException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class DocService {

	Logger logger = LoggerFactory.getLogger(DocService.class);

	@Value("${spring.datasource.url}")
	String dbUrl;

	@Value("${spring.datasource.password}")
	String dbPassword;

	@Value("${spring.datasource.username}")
	String dbUsername;

	@Value("${spring.alfresco.url}")
	private String alfrescoUrl;

	@Value("${spring.alfresco.password}")
	String alfrescoPassword;

	@Value("${spring.alfresco.username}")
	String alfrescoUsername;

	@Value("${document.fetch.path}")
	String documentFetchPath;

	@Value("${zip.folder.path}")
	String zipFolderPath;

	@Value("${alfresco.main.folder.path}")
	String mainFolderPath;

	public Session createSession() {
		SessionFactory factory = SessionFactoryImpl.newInstance();
		Map<String, String> parameter = new HashMap<>();

		parameter.put(SessionParameter.USER, alfrescoUsername);
		parameter.put(SessionParameter.PASSWORD, alfrescoPassword);

		parameter.put(SessionParameter.ATOMPUB_URL, alfrescoUrl);
		parameter.put(SessionParameter.BINDING_TYPE, BindingType.ATOMPUB.value());

		Session session = factory.getRepositories(parameter).get(0).createSession();
		return session;

	}

	public String zipSelectedDocuments(String folders) {
		Session session = createSession();
		String[] arrOffolders = folders.split(",");
		ArrayList<String> folderPaths = new ArrayList<>();
		for (int i = 0; i < arrOffolders.length; i++) {
			folderPaths.add(mainFolderPath + arrOffolders[i]);

		}

		String zipPath = ZipFolderContents(session, folderPaths);

		return zipPath;
	}

	public Object downloadDocument(String docId) throws FileNotFoundException, SQLException {
		

		Session session = createSession();
		//session.getObject(docId);
		return session.getObject(docId);
		

		
	}
	public String uploadDocuments() throws FileNotFoundException, SQLException {
		logger.info("db url=" + dbUrl);
		logger.info("db alfrescoUrl=" + alfrescoUrl);
		logger.info("db alfrescoPassword=" + alfrescoPassword);
		logger.info("db alfrescoUsername=" + alfrescoUsername);

		Session session = createSession();
		Folder root = session.getRootFolder();

		logger.info("Session started .");

		CmisObject cmisObject = session.getObjectByPath(mainFolderPath+"NoticeResp");

		Folder parent = (Folder) cmisObject;

		String str = currDate(); // get current date

		String finalfolderid = createFolder(str, "AHXPN7134L", cmisObject, session, parent);

		logger.info("final folder id=" + finalfolderid); // folder creation
		String strfoldername=finalfolderid;
		String foldertodelete="";
		if(finalfolderid.contains(","))
		{
			logger.info("have flag activated"); 
			strfoldername=finalfolderid.split(",")[0];
			foldertodelete=finalfolderid.split(",")[1];
		}
		String docUploadPath = documentUpload(cmisObject, session, strfoldername);
		logger.info("final folder upload path=" + docUploadPath); // document upload

		 // db insert
		  String[] docDetails=docUploadPath.split(":");
	//	  insertRecord(dbUrl, dbUsername, dbPassword,docDetails[0].toString(),finalfolderid,docDetails[1].toString());
		
		
		logger.info("db inetion done ===="+finalfolderid.split(",").length);
		if(finalfolderid.contains(",")) {
			String[] docpath=docUploadPath.split(":");
			session.getObjectByPath(docpath[0], docpath[1]).delete();
			logger.info("file deleted with path="+docpath[0]+" and name="+docpath[1]);
			int len=finalfolderid.split(",").length;
			for(int i=len-1;i>=1;i--)
			{
				foldertodelete=finalfolderid.split(",")[i];
		session.getObject(foldertodelete).delete();
		logger.info("folder deleted with id="+foldertodelete);
			}
		}
		logger.info("db inetion done");

		return "Upload Documents done at path:" + docUploadPath;

	}

	public String currDate() {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		LocalDateTime now = LocalDateTime.now();
		String str = dtf.format(now);
		return str;
	}

	public String currDateTimestamp() {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss");
		LocalDateTime now = LocalDateTime.now();
		String str = dtf.format(now);
		return str;
	}

	public String createFolder(String date, String foldername, CmisObject cmisObject, Session session, Folder parent) {
		logger.info(date);

		String[] arrOfStr = date.split("-");
		 String path="/EverifScheme/NoticeResp";
			
		logger.info("shikha=" + arrOfStr[0]);

		String fid = foldername; // "ASSDD7";
		String finalfolderid = null;
		String finalfolderpath = null;
		String flag="";
		for (int i = 0; i <= arrOfStr.length; i++) {

			 // create folder logic
			//properties
			 Map<String, Object> properties = new HashMap<>();
			 properties.put(PropertyIds.OBJECT_TYPE_ID, "cmis:folder");
			 if(i>2)
			 {
				 logger.info("SHIKHA =."+fid);
				 properties.put(PropertyIds.NAME, fid); // folder name
			 }
			 else
			 {
			     logger.info(arrOfStr[i]);
			     logger.info("SHIKHA newfolder="+arrOfStr[i]);
			 properties.put(PropertyIds.NAME, arrOfStr[i]); // folder name
			 }

			 // create the folder
			 
			 if(i>0)
			 {
				 logger.info("SHIKHA finalfolderid="+finalfolderid);
			 	cmisObject = session.getObject(finalfolderid);
			 	parent = (Folder)cmisObject;
			 }
			 Folder child=null;
		try {
			child = parent.createFolder(properties);

			
			  //st=child.getId();
			  finalfolderid=child.getId();
			  finalfolderpath=child.getPath();
			  flag=flag+","+finalfolderid;
		}catch(CmisContentAlreadyExistsException e)
		{
			logger.info("SHIKHA already at index="+i);
			
			if(i>2)
			{
				
				path=path+"/"+foldername;
			}
			else
			{
				
				path=path+"/"+arrOfStr[i];
			}
			
			CmisObject obj=session.getObjectByPath(path);
			finalfolderid=obj.getId();
					//child.getId();
			  finalfolderpath=path;
			logger.info("already present");
			
			
			 }
		logger.info("DONE."+finalfolderid);// need to be saved in db
		logger.info("DONE."+finalfolderpath);// need to be saved in db
		logger.info("new created folder present SHIHKA="+flag);
			 }
		logger.info("SSSFINAL FOLDER ID SHIHKA="+finalfolderid+flag);
		return finalfolderid+flag;

	}

	public String documentUpload(CmisObject cmisObject, Session session, String finalfolderid)
			throws FileNotFoundException {

		cmisObject = session.getObject(finalfolderid); // finalfolder

		Folder docUploadfolder = (Folder) cmisObject;
		String docUploadfolderPath = docUploadfolder.getPath();
		logger.info("shikha=" + docUploadfolderPath);

		File directoryPath = new File(documentFetchPath);
		File filesList[] = directoryPath.listFiles();
		File file = filesList[0];
		String name = file.getName();

		// properties
		Map<String, Object> properties2 = new HashMap<>();
		properties2.put(PropertyIds.OBJECT_TYPE_ID, "cmis:document");
		properties2.put(PropertyIds.NAME, name);
		// content

		InputStream stream = new FileInputStream(file);

		ContentStream contentStream = session.getObjectFactory().createContentStream(name, file.length(),
				"application/pdf", new FileInputStream(file));

		// create a major version
		Document newDoc = docUploadfolder.createDocument(properties2, contentStream, VersioningState.MAJOR);

		downloadDocumentByID(session, newDoc.getId(), newDoc.getName(), zipFolderPath);

		 return docUploadfolderPath+":"+newDoc.getName();
	}

	public void downloadDocumentByID(Session session, String documentID, String fileName, String destinationFolder) {
		String fullPath = destinationFolder + fileName;

		Folder root = session.getRootFolder();

		Document newDocument = (Document) session.getObject(documentID);
		logger.info("newDocument Id=" + newDocument.getId());
		try {
			ContentStream cs = newDocument.getContentStream(null);
			BufferedInputStream in = new BufferedInputStream(cs.getStream());
			FileOutputStream fos = new FileOutputStream(fullPath);
			OutputStream bufferedOutputStream = new BufferedOutputStream(fos);
			byte[] buf = new byte[1024];
			int n = 0;
			while ((n = in.read(buf)) > 0) {
				bufferedOutputStream.write(buf, 0, n);
			}
			bufferedOutputStream.close();
			fos.close();
			in.close();
		} catch (IOException e) {
			throw new RuntimeException(e.getLocalizedMessage());
		}
	}

	public String ZipFolderContents(Session session, ArrayList<String> folderPaths) {
		ArrayList<String> filelist = new ArrayList<>();
		String outputfolderPath = zipFolderPath;
		for (int i = 0; i < folderPaths.size(); i++) {
			logger.info("folder no" + i + ":" + folderPaths.get(i));
			Folder newfolder = (Folder) session.getObjectByPath(folderPaths.get(i));

			for (CmisObject child : newfolder.getChildren()) {
				logger.info(child.getName() + "::::::" + child.getId());
				filelist.add(child.getName());
				downloadDocumentByID(session, child.getId(), child.getName(), zipFolderPath);

			}

		}
		String str = createZipfolder(filelist, outputfolderPath, "ahxpn3423k");
		return str;
	}

	public void printZipFiles() {
		logger.info("\nThe zip files in the current directory is: \n");
		File curDir = new File(".");
		File[] filesList = curDir.listFiles();
		for (File f : filesList) {
			if (f.getName().contains(".zip")) {
				logger.info(f.getName() + ", ");
			}
		}
	}

	public String createZipfolder(ArrayList<String> filesToBeWritten, String outputfolderPath, String foldername) {
		String date = currDateTimestamp();
		String outputZipFileName = outputfolderPath + foldername + date + ".zip";

		try {
			printZipFiles();
			// create a ZipOutputStream object
			FileOutputStream fos = new FileOutputStream(outputZipFileName);
			ZipOutputStream zos = new ZipOutputStream(fos);

			for (int i = 0; i < filesToBeWritten.size(); i++) {

				File srcFile = new File(outputfolderPath + filesToBeWritten.get(i));
				FileInputStream fis = new FileInputStream(srcFile);

				// Start writing a new file entry
				zos.putNextEntry(new ZipEntry(srcFile.getName()));

				int length;
				// create byte buffer
				byte[] buffer = new byte[1024];

				// read and write the content of the file
				while ((length = fis.read(buffer)) > 0) {
					zos.write(buffer, 0, length);
				}
				// current file entry is written and current zip entry is closed
				zos.closeEntry();

				// close the InputStream of the file
				fis.close();
				srcFile.delete();

			}

			// close the ZipOutputStream
			zos.close();
			logger.info("\nThe file is written successfully");
			// printZipFiles();
		} catch (IOException ioe) {
			logger.info("Error creating zip file: " + ioe);
		}

		return outputZipFileName;
	}

	public void insertRecord(String url, String user, String password,String docPath, String docId,String docName) throws SQLException {
		// postgresql-9.1-901.jdbc4.jar added for driver
		String INSERT_USERS_SQL = "INSERT INTO ais.TP_DOC_ALL" +
		        "  (doc_seq_id,doc_name,doc_source,doc_path,create_date,create_by) VALUES " +
		        " (?, ?, ?, ?, ?,?);";
		logger.info(INSERT_USERS_SQL);
		// Step 1: Establishing a Connection
		try (Connection connection = DriverManager.getConnection(url, user, password);

				// Step 2:Create a statement using connection object
				  PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL)) {
	        preparedStatement.setString(1, docId);
	        preparedStatement.setString(2, docName);
	        preparedStatement.setString(3, "TaxPayer-ASSDD7");
	        preparedStatement.setString(4, docPath);
	        preparedStatement.setString(5, currDate());
	        preparedStatement.setString(6, "TaxPayer");

			logger.info(preparedStatement.toString());

			preparedStatement.executeUpdate();
		} catch (SQLException e) {

			logger.error(e.getLocalizedMessage());
		}

	}

}
